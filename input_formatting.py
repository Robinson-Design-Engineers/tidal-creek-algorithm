# Generated by Claude AI, reviewed by Sam Kraus 2024/09/13
import numpy as np
import h5py
import os

def input_formatting(filename):
    # Change file names for specific site
    filename = filename
    base_name = os.path.basename(filename)  # Get the file name (e.g., "av_DEM_converted_m.asc")
    name_part = base_name[:base_name.rfind('.')]  # Remove the part after the last dot
    filename_out_meta = f"INPUTS/{name_part}_metadata.h5"
    filename_out = f"INPUTS/{name_part}.h5"

    # Open the file for reading
    with open(filename, 'r') as file:
        # Read and directly unpack the metadata from the first six lines
        ncols = int(file.readline().split()[1]) # MATLAB indexes tline's 15:18, if error try 15:17
        nrows = int(file.readline().split()[1]) # MATLAB indexes tline's 15:18, if error try 15:17
        xc = float(file.readline().split()[1])
        yc = float(file.readline().split()[1])
        gs = float(file.readline().split()[1]) # MATLAB's tline(15:18) for cellsize=0.25, tline(15:17) for cellsize=0.5, tline(15:15) for cellsize=1 or 2 
        nf = float(file.readline().split()[1])

        # Read the data values into variable Z
        # Z = np.loadtxt(file)
        Z = np.loadtxt(filename, skiprows=6)

    # Transpose Z to match the orientation of the ASCII file
    Z = Z.T

    # Replace no-data values with NaN
    Z[Z == nf] = np.nan

    # Check types and convert to float if needed
    xc = float(xc)
    gs = float(gs)
    ncols = float(ncols)
    yc = float(yc)
    nrows = float(nrows)

    # Display the extracted values
    print(f'ncols: {ncols}')
    print(f'nrows: {nrows}')
    print(f'x corner: {xc:.1f}')
    print(f'y corner: {yc:.1f}')
    print(f'cell size: {gs:.1f}')
    print(f'NoData value: {nf:.1f}')

    # Proceed with the original code
    x = np.arange(xc, xc+gs*ncols, gs)
    y = np.arange(yc+gs*(nrows-1), yc-gs, -gs)

    # site's metadata file output
    with h5py.File(filename_out_meta, 'w') as f:
        f.create_dataset('x', data=x)
        f.create_dataset('y', data=y)
        f.create_dataset('xc', data=xc)
        f.create_dataset('yc', data=yc)
        f.create_dataset('nrows', data=nrows)
        f.create_dataset('ncols', data=ncols)
        f.create_dataset('gs', data=gs)
        f.create_dataset('nf', data=nf)

    # Create X and Y matrices for raster values to map to
    X, Y = np.meshgrid(x, y)

    # site's file output
    with h5py.File(filename_out, 'w') as f:
        f.create_dataset('X', data=X)
        f.create_dataset('Y', data=Y)
        f.create_dataset('Z', data=Z)

    return filename_out, filename_out_meta